---
title: "AON Options"
author: "Jake Rozran"
format: 
  html:
    toc: true
framework: bootstrap
mode: selfcontained
highlighter: prettify
hitheme: twitter-bootstrap
assets:
  css:
  - http://fonts.googleapis.com/css?family=Raleway:300
  - http://fonts.googleapis.com/css?family=Oxygen
---

<style>
body{
  font-family: 'Oxygen', sans-serif;
  font-size: 16px;
  line-height: 24px;
}

h1,h2,h3,h4 {
  font-family: 'Raleway', sans-serif;
}

.container { width: 1000px; }
h3 {
  background-color: #D4DAEC;
  text-indent: 100px; 
}
h4 {
  text-indent: 100px;
}

g-table-intro h4 {
  text-indent: 0px;
}
</style>

```{r}
#| message: false
#| warning: false
#| code-fold: true

library(httr)
library(lubridate)
library(dplyr)
library(ggplot2)
library(scales)
library(evd)
library(purrr)
library(tidyr)

options(scipen = 999)

# Get Stock Data
get_dat <- function(symbol, freq_num = 1, freq = "d", period1 = 1410825600, 
                    period2 = as.numeric(format(as_datetime(Sys.time()), "%s"))) {
    symbol <- gsub("\\.", "\\-", symbol)
    URL <- paste0("https://query1.finance.yahoo.com/v7/finance/download/", 
                  symbol, "?period1=", period1, "&period2=", period2, 
                  "&interval=", freq_num, freq, 
                  "&events=history&includeAdjustedClose=true")
    
    dat <- GET(URL)
    dat <- content(dat, show_col_types = FALSE, encoding = "UTF-8")
    
    if(length(class(dat)) < 4) {
        print(paste0("shit is breaking on ", symbol))
        return(NULL)
    }
    
    dat$symbol <- symbol
    
    return(dat)
}
```

## Introduction

Last year, I spent a considerable amount of time attempting to simulate stock 
price movements using a monte carlo simulation. The goal was to use the 
simulation in order to pick the stocks most likely to move upwards. It seems 
like this simulation could be used to fuel any model: picking winners, losers, 
or any number of very specific targets. 

This document is intended to remind myself (and others) of what I did and how I 
did it. Feedback is welcome. 

## How it Worked

1. Get historical data on stock or crypto & calculate daily movement (percent 
change)
2. Model the distribution of daily changes with a 
[psuedo extreme value distribution (EVD)](https://en.wikipedia.org/wiki/Generalized_extreme_value_distribution)
3. Create a Monte Carlo simulation of the stock using values chosen from the EVD
4. Create a model using features based on the Monte Carlo simulation

## Walking Through the Steps

For this example, I will use `AON`.

### Step 1: Get Historical Data & Calculate Daily Movement

```{r}
#| message: false
#| warning: false
#| code-fold: true
#| out-width: "100%"
#| fig-align: "center"

dat <- get_dat("AON")

dat <- dat %>% 
    mutate(last_close = lag(Close, 1),
           percent_change = (Close - last_close) / last_close) %>% 
    select(symbol, 
           Date,
           Close,
           last_close,
           percent_change)

ggplot(dat, aes(x = Date, y = Close)) + 
    geom_line() + 
    scale_y_continuous(labels = dollar_format()) +
    ggtitle("Price of AON since September 2014") + 
    theme(panel.background = element_blank(),
          panel.grid = element_line(color = "light gray"),
          axis.ticks = element_blank(),
          panel.border = element_rect(fill = NA, color = "black"))
```

Notice that while the price seems to be much more volatile since 2020, this is 
actually an illusion due to the higher price. The percent change (below), seems 
to be relatively constant throughout the time period (COVID definitely had a 
temporary impact on volatility). 

```{r}
#| message: false
#| warning: false
#| code-fold: true
#| out-width: "100%"
#| fig-align: "center"

ggplot(dat, aes(x = Date, y = percent_change)) + 
    geom_line(linewidth = 0.25) + 
    scale_y_continuous(labels = percent_format()) +
    ggtitle("Percent Change in Price of AON since September 2014") + 
    ylab("Percent Change in Price (Close to Close)") + 
    theme(panel.background = element_blank(),
          panel.grid = element_line(color = "light gray"),
          axis.ticks = element_blank(),
          panel.border = element_rect(fill = NA, color = "black"))
```

### Step 2: Modeling the Distribution

The created distribution, as desired, is very similar to the actuals, but with 
slightly thicker tails. This allows for more volatility to be seen in the model, 
especially on the downside. I intentionally wanted to be bearish (my bets were 
all bullish) as a hedge. 

Actual data are on the left, modeled data are on the right.

```{r}
#| message: false
#| warning: false
#| code-fold: true
#| out-width: "100%"
#| fig-align: "center"

upper_scale <- 0.60
lower_scale <- 0.65
upper_shape <- 0.09
lower_shape <- 0.1
sample_size <- 20000

perc_pos <- sum(ifelse(!is.na(dat$percent_change) & dat$percent_change >= 0, 
                       TRUE, FALSE)) / length(dat$percent_change)
perc_neg <- sum(ifelse(!is.na(dat$percent_change) & dat$percent_change < 0, 
                       TRUE, FALSE)) / length(dat$percent_change)
avg <- mean(dat$percent_change, na.rm = TRUE)
std <- sd(dat$percent_change, na.rm = TRUE)

evd_dist <- tibble(
    percent_change = c(
        rgev(sample_size * perc_pos, 
             loc = avg, 
             scale = upper_scale * std, 
             shape = upper_shape),
        -1 * rgev(sample_size * perc_neg, 
                  loc = avg, 
                  scale = lower_scale * std, 
                  shape = lower_shape)))

act <- ggplot(dat, aes(x = percent_change)) + 
    geom_histogram(fill = "navy", color = "white") + 
    scale_x_continuous(limits = c(min(evd_dist$percent_change) - 0.05, 
                                      max(evd_dist$percent_change) + 0.05), 
                       labels = percent_format()) +
    scale_y_continuous(labels = comma_format()) +
    ggtitle("Histogram of Percent Change in\nPrice of AON since September 2014") + 
    xlab("Percent Change in Price (Close to Close)") + 
    theme(panel.background = element_blank(),
          panel.grid = element_line(color = "light gray"),
          axis.ticks = element_blank(),
          panel.border = element_rect(fill = NA, color = "black"))

mod <- ggplot(evd_dist, aes(x = percent_change)) + 
    geom_histogram(fill = "navy", color = "white") + 
    scale_x_continuous(limits = c(min(evd_dist$percent_change) - 0.05, 
                                      max(evd_dist$percent_change) + 0.05), 
                       labels = percent_format()) +
    scale_y_continuous(labels = comma_format()) +
    ggtitle("Histogram of Modeled Percent\nChange in Price of AON") + 
    xlab("Percent Change in Price (Close to Close)") + 
    theme(panel.background = element_blank(),
          panel.grid = element_line(color = "light gray"),
          axis.ticks = element_blank(),
          panel.border = element_rect(fill = NA, color = "black"))

gridExtra::grid.arrange(act, mod, nrow = 1)
```
```{r}
#| message: false
#| warning: false
#| code-fold: true
#| out-width: "100%"
#| fig-align: "center"

act <- ggplot(dat, aes(x = percent_change)) + 
    geom_boxplot() + 
    scale_x_continuous(limits = c(min(evd_dist$percent_change) - 0.05, 
                                      max(evd_dist$percent_change) + 0.05), 
                       labels = percent_format()) +
    scale_y_continuous(labels = comma_format()) +
    ggtitle("Boxplot of Percent Change in\nPrice of AON since November 2017") + 
    xlab("Percent Change in Price (Close to Close)") + 
    coord_flip() + 
    theme(panel.background = element_blank(),
          panel.grid.major.y = element_line(color = "light gray"),
          panel.grid.major.x = element_blank(),
          axis.ticks = element_blank(),
          axis.text.x = element_blank(),
          panel.border = element_rect(fill = NA, color = "black"))

mod <- ggplot(evd_dist, aes(x = percent_change)) + 
    geom_boxplot() + 
    scale_x_continuous(limits = c(min(evd_dist$percent_change) - 0.05, 
                                      max(evd_dist$percent_change) + 0.05), 
                       labels = percent_format()) +
    scale_y_continuous(labels = comma_format()) +
    ggtitle("Boxplot of Modeled Percent\nChange in Price of AON") + 
    xlab("Percent Change in Price (Close to Close)") + 
    coord_flip() + 
    theme(panel.background = element_blank(),
          panel.grid.major.y = element_line(color = "light gray"),
          panel.grid.major.x = element_blank(),
          axis.ticks = element_blank(),
          axis.text.x = element_blank(),
          panel.border = element_rect(fill = NA, color = "black"))

gridExtra::grid.arrange(act, mod, nrow = 1)
```

### Step 3: The Monte Carlo Simulation

A Monte Carlo simulation allows us to create alternative futures randomly. The 
idea is that if you simulate enough times, you'll get an idea of what is 
possible and what can be expected (read: more likely to occur). 

This first plot shows a single random future generated. If the actual price 
(black) wasn't plotted, too, one could be fooled into thinking this "future" 
actually happened. 

```{r}
#| message: false
#| warning: false
#| code-fold: true
#| out-width: "100%"
#| fig-align: "center"

start_date <- as_date('2021-09-24')
start_price <- dat %>% 
    filter(Date == start_date) %>% 
    pull(Close)
end_date <- start_date + years(7)

mc_dat <- tibble(Date = seq.Date(start_date, end_date, by = "day"),
                 weekday = weekdays(Date)) %>%
    filter(!weekday %in% c("Saturday", "Sunday")) %>% 
    mutate(perc_change = c(start_price, sample(evd_dist$percent_change, 
                                               size = length(Date) - 1, 
                                               replace = TRUE) + 1),
    closing_price = cumprod(perc_change))

plot_dat <- dat %>% 
    full_join(mc_dat, by = "Date") %>% 
    filter(Date >= as_date("2021-01-01")) 

ggplot(plot_dat, aes(x = Date)) +
    geom_line(aes(y = Close)) + 
    geom_line(aes(y = closing_price), color = "navy", alpha = 0.5) +
    ggtitle("Creating a Singular Alternative Future for AON",
            subtitle = "Simulation begins on 9/24/21\nActual price is black; simulated price is navy") + 
    scale_y_continuous(labels = dollar_format()) + 
    theme(panel.background = element_blank(),
          panel.grid.major.y = element_line(color = "light gray"),
          panel.grid.major.x = element_blank(),
          axis.ticks = element_blank(),
          panel.border = element_rect(fill = NA, color = "black"))

```

When we plot 10,000 alternative futures on the same graph with the actual 
prices, a unique thing happens. We can see many potential stock price outcomes, 
with the most likely happening most often. 

```{r}
#| message: false
#| warning: false
#| code-fold: true
#| out-width: "100%"
#| fig-align: "center"

num_sims <- 10000

mc_dat <- tibble(
    Date = rep(seq.Date(start_date, end_date, by = "day"), num_sims),
    weekday = weekdays(Date),
    ) %>% 
    filter(!weekday %in% c("Saturday", "Sunday"))

num_days <- dim(mc_dat)[1] / num_sims

mc_dat_wide <- mc_dat %>% 
    mutate(rnum = row_number(), 
           sample = rep(1:num_sims, each = num_days),
           perc_change = sample(evd_dist$percent_change, 
                         size = length(Date), 
                         replace = TRUE) + 1,
           perc_change = ifelse(rnum %% num_days == 1, 
                                start_price, 
                                perc_change)) %>% 
    select(Date, sample, perc_change) %>% 
    pivot_wider(names_from = sample, values_from = perc_change) 
           
cprod <- mc_dat_wide %>% 
    select(where(is.numeric)) %>% 
    map_dfc(cumprod)

mc_dat_final <- cprod %>% 
    mutate(Date = mc_dat_wide$Date) %>% 
    pivot_longer(!Date, names_to = "sample", values_to = "closing_price")

plot_dat <- dat %>% 
    full_join(mc_dat_final, by = "Date") %>% 
    filter(Date >= as_date("2020-01-01")) 

perc_black <- percent(
    sum(ifelse(plot_dat$closing_price[plot_dat$Date == as_date("2028-09-22")] > 299,
                                                TRUE, FALSE)) / num_sims, 
    accuracy = 0.01)

ggplot(plot_dat, aes(x = Date)) +
    geom_line(aes(y = closing_price, group = sample), color = "navy", alpha = 0.15) +
    geom_line(aes(y = Close)) + 
    ggtitle("Creating 10,000 Alternative Futures for AON",
            subtitle = "Simulation begins on 9/24/21\nActual price is black; simulated price is navy") + 
    scale_y_continuous(labels = dollar_format()) + 
    theme(panel.background = element_blank(),
          panel.grid.major.y = element_line(color = "light gray"),
          panel.grid.major.x = element_blank(),
          axis.ticks = element_blank(),
          panel.border = element_rect(fill = NA, color = "black"))
```

This is not to say that it is "correct." Every time the simulation is rerun, the 
randomness of the experiment changes things slightly. Below you can see the 
final experimental prices for the 10,000 simulations compared to the actual final 
price of `AON`.

I _think_ you have a `r perc_black` likelihood of getting to exercise your 
options for gain. We _could_ rerun this simulation a bunch of times to give some 
confidence around that, too... 

```{r}
#| message: false
#| warning: false
#| code-fold: true
#| out-width: "100%"
#| fig-align: "center"

hist <- ggplot(plot_dat[plot_dat$Date == as_date("2028-09-22"), ], 
               aes(x = closing_price)) + 
    geom_histogram(fill = "navy", color = "white") + 
    geom_vline(aes(xintercept = 299), color = "red") + 
    ggtitle("Histogram of 10,000 Alternative\nFutures final prices",
            subtitle = "Actual closing price is red line") + 
    xlab("Closing Price") +
    scale_x_continuous(labels = dollar_format()) + 
    scale_y_continuous(labels = comma_format()) + 
    theme(panel.background = element_blank(),
          panel.grid.major.y = element_line(color = "light gray"),
          panel.grid.major.x = element_blank(),
          axis.ticks = element_blank(),
          panel.border = element_rect(fill = NA, color = "black"))

boxp <- ggplot(plot_dat[plot_dat$Date == as_date("2028-09-22"), ], 
               aes(x = closing_price)) + 
    geom_boxplot() + 
    geom_vline(aes(xintercept = 299), color = "red") + 
    ggtitle("Boxplot of 10,000 Alternative\nFutures final prices",
            subtitle = "Actual closing price is red line") + 
    xlab("Closing Price") +
    scale_x_continuous(labels = dollar_format()) + 
    scale_y_continuous(labels = comma_format()) + 
    theme(panel.background = element_blank(),
          panel.grid.major.y = element_line(color = "light gray"),
          panel.grid.major.x = element_blank(),
          axis.text.y = element_blank(),
          axis.ticks = element_blank(),
          panel.border = element_rect(fill = NA, color = "black"))

gridExtra::grid.arrange(hist, boxp, nrow = 1)
```
