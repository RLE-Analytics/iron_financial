---
title: "Put Buying Strategy"
author: "Jake Rozran"
format: html
---


```{r reticulate}
#| code-fold: true

library(ggplot2)
library(reticulate)
library(rvest)
library(dplyr)
library(purrr)

url <- "https://www.iweblists.com/us/commerce/MarketCapitalization.html"

top_comp <- url %>% 
    read_html() %>% 
    html_table() %>% 
    pluck(1)

names(top_comp) <- top_comp[1, ]
top_comp <- top_comp %>% 
    slice(-1)
```

```{python libraries}
#| code-fold: true

# GET LIBRARIES
import warnings
warnings.simplefilter(action = 'ignore', category = FutureWarning)

import streamlit as st
import math
import requests
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
import pandas as pd
from scipy.stats import genextreme
from random import choices
import plotly.express as px

NUM_SAMPLES = 100000
SAMPLE_SIZE = 20000

token = pd.read_csv("tradier.config")
token = token['prod_token'].iloc[0]
```

```{python functions}
#| code-fold: true

def get_hist_data(symbol, 
                  token,
                  start = '2000-01-01', 
                  end = datetime.today().date().isoformat(),
                  endpoint = 'https://api.tradier.com',
                  path = '/v1/markets/history'):

    response = requests.get(f'{endpoint}{path}',
        params = {'symbol':f'{symbol}', 
                  'interval': 'daily', 
                  'start': '2000-01-01', 
                  'end': f'{datetime.today().date().isoformat()}'},
        headers = {'Authorization': f'Bearer {token}', 
                   'Accept': 'application/json'})
    json_response = response.json()
    
    if type(json_response['history']) != dict:
        return(-1)
    
    hist_price = pd.json_normalize(json_response['history']['day'])
    hist_price = hist_price.rename(({'date': 'Date',
                                     'open': 'Open',
                                     'close': 'Close'}),
                                    axis = 'columns')
    hist_price['perc_change'] = ((hist_price['Close'] - hist_price['Open']) / 
                                    hist_price['Open'])
                                    
    return(hist_price)

def get_option_dates(symbol,
                     token,
                     endpoint = 'https://api.tradier.com',
                     path = '/v1/markets/options/expirations'):
    response = requests.get(f'{endpoint}{path}',
        params = {'symbol': f'{symbol}', 
                  'includeAllRoots': 'true'},
        headers = {'Authorization': f'Bearer {token}', 
                   'Accept': 'application/json'})
    
    json_response = response.json()
    dates = json_response['expirations']['date']
    
    return(dates)

def get_option_chain(symbol, 
                     token, 
                     option_date,
                     endpoint = 'https://api.tradier.com',
                     path = '/v1/markets/options/chains'):
    
    response = requests.get(f'{endpoint}{path}',
        params = {'symbol': f'{symbol}', 
                  'expiration': f'{option_date}', 
                  'greeks': 'true'},
        headers = {'Authorization': f'Bearer {token}', 
                   'Accept': 'application/json'})
    json_response = response.json()
    
    if type(json_response['options']) != dict:
        return(-1)
    
    chain = pd.json_normalize(json_response['options']['option'])
    
    return(chain)

def get_current_price(symbol, 
                      token,
                      endpoint = 'https://api.tradier.com',
                      path = '/v1/markets/quotes'):

    response = requests.get(f'{endpoint}{path}',
        params = {'symbols': f'{symbol}', 
                  'greeks': 'false'},
        headers = {'Authorization': f'Bearer {token}', 
                   'Accept': 'application/json'})
    
    json_response = response.json()
    price = json_response['quotes']['quote']['last']
    
    return(price)

def get_latest_day(stock, current_date = datetime.now()):
    if current_date.date().weekday() == 5:
        current_date = current_date.date() - timedelta(days = 1)
    elif current_date.date().weekday() == 6: 
        current_date = current_date.date() - timedelta(days = 2)
    else: 
        if current_date.hour + (current_date.minute / 60) < 9.5:
            current_date = current_date.date() - timedelta(days = 3)
        else:
            current_date = current_date.date()    
    
    return(current_date)


def get_simulation(symbol, 
                   token,
                   option_date,
                   num_samples = NUM_SAMPLES,
                   sample_size = SAMPLE_SIZE, 
                   upper_scale = 0.60, 
                   upper_shape = -0.09, 
                   lower_scale = 0.65, 
                   lower_shape = -0.1,
                   today = datetime.utcnow().date()):

    date = {"Date": pd.date_range(datetime.today().date(), option_date)}

    dates = pd.DataFrame(data = date)
    dates['wday'] = dates['Date'].dt.dayofweek
    dates = dates.loc[dates['wday'] != 5]
    dates = dates.loc[dates['wday'] != 6]

    num_trading_days = dates.shape[0]
    
    start = today - timedelta(days = num_trading_days)

    start = start.isoformat()
    start_date = get_latest_day(symbol, datetime.now() - timedelta(days = 1))
    
    hist_price = get_hist_data(symbol, token)
    if type(hist_price) != pd.core.frame.DataFrame:
        return(-1)
    
    perc_pos = 0.5
    # (
    #     sum(hist_price.loc[hist_price['Date'] > start, 'perc_change'] > 0) / 
    #     len(hist_price.loc[hist_price['Date'] > start, 'perc_change'])
    # )

    perc_neg = 1 - perc_pos

    avg = np.mean(hist_price['perc_change'])
    std = np.std(hist_price['perc_change'])

    samp_upper = genextreme.rvs(upper_shape, 
                                loc = avg, 
                                scale = upper_scale * std,
                                size = round(sample_size * perc_pos))

    samp_lower = -1 * genextreme.rvs(lower_shape, 
                                     loc = avg, 
                                     scale = lower_scale * std,
                                     size = round(sample_size * perc_neg))

    samp = np.append(samp_upper, samp_lower)

    sample_col = pd.Series(range(1, num_trading_days + 1)).repeat(num_samples)
    dates_col = dates['Date'].repeat(num_samples)
    sample_values = np.array(choices(samp + 1, 
                                     k = num_samples * num_trading_days
                                     )).reshape(num_trading_days, 
                                                num_samples)

    start_price = get_current_price(symbol, token)

    sample_values[0] = start_price

    price_paths = sample_values.cumprod(axis = 0)

    final_prices = price_paths[num_trading_days - 1]
    
    return(final_prices)

def eval_puts(symbol, token, option_date, final_prices):
    
    opt_chain = get_option_chain(symbol, token, option_date)
    if type(opt_chain) != pd.core.frame.DataFrame:
        return(-1)
    
    puts = opt_chain.loc[opt_chain['option_type'] == 'put']
    puts['symbol'] = symbol
    puts['CP'] = get_current_price(symbol, token)
    puts['strike_minus_ask'] = puts['strike'] - puts['ask']
    puts['strike_plus_bid'] = puts['strike'] + puts['bid']

    for strp in puts.strike:
        puts.loc[puts['strike'] == strp, 'likelihood_below'] = (
            sum(final_prices < puts.loc[puts['strike'] == strp, 'strike_minus_ask'].item()) / NUM_SAMPLES)
        
        puts.loc[puts['strike'] == strp, 'likelihood_above'] = (
            sum(final_prices > puts.loc[puts['strike'] == strp, 'strike_plus_bid'].item()) / NUM_SAMPLES)
        
        puts.loc[puts['strike'] == strp, 'likelihood_strike_below'] = (
            sum(final_prices < strp) / NUM_SAMPLES)
        
        puts.loc[puts['strike'] == strp, 'likelihood_strike_above'] = (
            sum(final_prices > strp) / NUM_SAMPLES)
        
        puts.loc[puts['strike'] == strp, 'ev_above_ep'] = (
            np.mean(final_prices[final_prices > puts.loc[puts['strike'] == strp, 'strike_plus_bid'].item()])) 
        
        puts.loc[puts['strike'] == strp, 'ev_below_ep'] = (
            np.mean(final_prices[final_prices < puts.loc[puts['strike'] == strp, 'strike_minus_ask'].item()])) 
    
    return(puts)

def eval_calls(symbol, token, option_date, final_prices):
    
    opt_chain = get_option_chain(symbol, token, option_date)
    if type(opt_chain) != pd.core.frame.DataFrame:
        return(-1)
    
    calls = opt_chain.loc[opt_chain['option_type'] == 'call']
    calls['symbol'] = symbol
    calls['CP'] = get_current_price(symbol, token)
    calls['strike_plus_ask'] = calls['strike'] + calls['ask']
    calls['strike_minus_bid'] = calls['strike'] - calls['bid']

    for strp in calls.strike:
        calls.loc[calls['strike'] == strp, 'likelihood_above'] = (
            sum(final_prices > calls.loc[calls['strike'] == strp, 'strike_plus_ask'].item()) / NUM_SAMPLES)
        
        calls.loc[calls['strike'] == strp, 'likelihood_below'] = (
            sum(final_prices < calls.loc[calls['strike'] == strp, 'strike_minus_bid'].item()) / NUM_SAMPLES)
        
        calls.loc[calls['strike'] == strp, 'likelihood_strike_below'] = (
            sum(final_prices < strp) / NUM_SAMPLES)
        
        calls.loc[calls['strike'] == strp, 'likelihood_strike_above'] = (
            sum(final_prices > strp) / NUM_SAMPLES)
        
        calls.loc[calls['strike'] == strp, 'ev_below_ep'] = (
            np.mean(final_prices[final_prices < calls.loc[calls['strike'] == strp, 'strike_minus_bid'].item()])) 
        
        calls.loc[calls['strike'] == strp, 'ev_above_ep'] = (
            np.mean(final_prices[final_prices > calls.loc[calls['strike'] == strp, 'strike_plus_ask'].item()])) 
    
    return(calls)


def reshape_puts(puts):
    puts = puts.rename(({'strike_minus_ask': 'EP Buy',
                         'strike_plus_bid': 'Effective Price (sell)',
                         'last': 'Last Price',
                         'expiration_date': 'Expiration Date',
                         'likelihood_below': 'Llhd Blw EP',
                         'likelihood_above': 'Llhd Abv EP',
                         'ev_below_ep': 'EV Blw EP',
                         'ev_above_ep': 'EV Abv EP',
                         'likelihood_strike_above': 'Llhd Abv Stk',
                         'likelihood_strike_below': 'Llhd Blw Stk'}),
                        axis = 'columns')
    
    puts.fillna(0, inplace = True)
            
    puts['Cost'] = puts['ask'] * -100
    puts['Gain'] = (puts['strike'] - puts['EV Blw EP'] - puts['ask']) * 100
    puts['Llhd Abv EP'] = 1 - puts['Llhd Blw EP']
    
    puts['EV'] = ((puts['Llhd Abv EP'] * puts['Cost']) + 
                              (puts['Llhd Blw EP'] * puts['Gain']))
                              
    puts['CtEV'] = puts['EV'] / (-1 * puts['Cost'])
    
    puts_buy = puts[['symbol',
                     'CP',
                     'strike',
                     'ask',
                     'EP Buy',
                     'Llhd Blw EP',
                     'Llhd Abv EP',
                     'EV Blw EP',
                     'Cost',
                     'Gain',
                     'EV',
                     'CtEV']]
    
    puts_buy = puts_buy.loc[puts_buy['EV'] > 0]
    puts_buy = puts_buy.sort_values(by = 'EV', ascending = False, ignore_index = True)
    puts_buy['type'] = 'put'
    # puts_buy = puts_buy.iloc[0]
    
    return(puts_buy)

def reshape_calls(calls):
    calls = calls.rename(({'strike_plus_ask': 'EP Buy',
                         'strike_minus_bid': 'Effective Price (sell)',
                         'last': 'Last Price',
                         'expiration_date': 'Expiration Date',
                         'likelihood_below': 'Llhd Blw EP',
                         'likelihood_above': 'Llhd Abv EP',
                         'ev_below_ep': 'EV Blw EP',
                         'ev_above_ep': 'EV Abv EP',
                         'likelihood_strike_above': 'Llhd Abv Stk',
                         'likelihood_strike_below': 'Llhd Blw Stk'}),
                        axis = 'columns')
    
    calls.fillna(0, inplace = True)
            
    calls['Cost'] = calls['ask'] * -100
    calls['Gain'] = (calls['EV Abv EP'] - calls['strike'] - calls['ask']) * 100
    calls['Llhd Blw EP'] = 1 - calls['Llhd Abv EP']
    
    calls['EV'] = ((calls['Llhd Blw EP'] * calls['Cost']) + 
                              (calls['Llhd Abv EP'] * calls['Gain']))
                              
    calls['CtEV'] = calls['EV'] / (-1 * calls['Cost'])
    
    calls_buy = calls[['symbol',
                     'CP',
                     'strike',
                     'ask',
                     'EP Buy',
                     'Llhd Blw EP',
                     'Llhd Abv EP',
                     'EV Abv EP',
                     'Cost',
                     'Gain',
                     'EV',
                     'CtEV']]
    
    calls_buy = calls_buy.loc[calls_buy['EV'] > 0]
    calls_buy = calls_buy.sort_values(by = 'EV', ascending = False, ignore_index = True)
    calls_buy['type'] = 'call'
    # puts_buy = puts_buy.iloc[0]
    
    return(calls_buy)


def get_list_of_stocks():
    list_of_stocks = r.top_comp['Symbol'].tolist()
    
    return(list_of_stocks)

def get_all_puts(token, options_selection):
    list_of_stocks = get_list_of_stocks()
    
    final_puts = pd.DataFrame()
    
    for STOCK in list_of_stocks:
        print(f'{STOCK} starting')
    
        final_prices = get_simulation(STOCK, token, options_selection)
        if type(final_prices) != np.ndarray:
            continue
        
        puts = eval_puts(STOCK, token, options_selection, final_prices)
        if type(puts) != pd.core.frame.DataFrame:
            continue
        
        tmp_puts = reshape_puts(puts)
        
        final_puts = pd.concat([final_puts, tmp_puts], ignore_index = True)
        
        print(f'{STOCK} done')
    
    return(final_puts)

def get_all_options(token, options_selection):
    list_of_stocks = get_list_of_stocks()
    
    final_puts = pd.DataFrame()
    final_calls = pd.DataFrame()
    
    for STOCK in list_of_stocks:
        print(f'{STOCK} starting')
    
        final_prices = get_simulation(STOCK, token, options_selection)
        if type(final_prices) != np.ndarray:
            continue
        
        puts = eval_puts(STOCK, token, options_selection, final_prices)
        if type(puts) == pd.core.frame.DataFrame:
            tmp_puts = reshape_puts(puts)
            final_puts = pd.concat([final_puts, tmp_puts], ignore_index = True)
        
        calls = eval_calls(STOCK, token, options_selection, final_prices)
        if type(calls) == pd.core.frame.DataFrame:
            tmp_calls = reshape_calls(calls)
            final_calls = pd.concat([final_calls, tmp_calls], ignore_index = True)
        
        print(f'{STOCK} done')
    
    return(final_puts, final_calls)

```

```{python main}
#| code-fold: true
options_selection = '2023-04-06'

# final_puts = get_all_puts(token, options_selection)
final_puts, final_calls = get_all_options(token, options_selection)
```

```{r evaluate}
#| code-fold: true

options(scipen = 999)

py$final_puts %>% 
    filter(Cost >= -100) %>%
    arrange(desc(EV))

py$final_calls %>% 
    filter(Cost >= -100) %>%
    arrange(desc(EV))

picks <- tibble()
total_available <- 500
picked_stocks <- c()

while(total_available > 0) {
    tmp <- py$final_puts %>% 
        bind_rows(py$final_calls)
        filter(!py$final_puts$symbol %in% picked_stocks & 
                   Cost >= -100) %>% 
        filter(EV == max(EV)) %>% 
        head(1)
    
    symbol_picked <- tmp %>% 
        pull(symbol)
    cost <- tmp %>% 
        pull(Cost)
    
    total_available <- total_available + cost
    
    if(total_available < 0) {
        next
    }
    
    picked_stocks <- c(picked_stocks, symbol_picked)
    
    picks <- bind_rows(picks, tmp)
}



# write.csv(picks, "put_picks_04032023.csv")

```
# How many outcomes?

There are 2^n^ potential outcomes. In this case, n is `r length(picks$symbol)` 
and there are `r 2^length(picks$symbol)` outcomes. What is each outcome and 
what is the likelihood of each?

```{r}
NUM_SAMPLES <- 10000
NUM_PICKS <- length(picks$symbol)

sim_picks <- tibble(symbol = rep(unique(picks$symbol), NUM_SAMPLES),
                    sample = rep(1:NUM_SAMPLES, each = NUM_PICKS),
                    runif = runif(NUM_SAMPLES * NUM_PICKS)) %>% 
    left_join(picks, by = "symbol") %>% 
    mutate(winner = ifelse(runif <= `Llhd Blw EP`, TRUE, FALSE), 
           payout = ifelse(winner, Gain, Cost))

sim_sum <- sim_picks %>% 
    group_by(sample) %>% 
    summarise(winners = paste0(sort(unique(symbol[winner])), collapse = ","),
              num_win = sum(winner),
              payout = sum(payout))

prob_win <- sim_sum %>% 
    group_by(winners) %>% 
    summarise(count = n()) %>% 
    mutate(prob = count / NUM_SAMPLES) %>% 
    left_join(sim_sum, by = "winners") %>%
    select(-sample) %>% 
    unique() %>% 
    mutate(ev = prob * payout)

prob_win %>% 
    arrange(payout) %>% 
    mutate(cum_prob = cumsum(prob))


ggplot(prob_win, aes(x = reorder(winners, payout), y = prob)) + 
    geom_bar(stat = 'identity') +
    geom_vline(xintercept = 0, color = "red") + 
    theme(axis.ticks = element_blank(),
          axis.text.x = element_text(angle = 90, hjust = 1))

summary(sim_sum$payout)

ggplot(sim_sum, aes(x = payout)) + 
    geom_histogram(bins = 8) + 
    geom_vline(xintercept = 0, color = "red")
```

NEXT QUESTION TO ANSWER: How correlated are these stocks? How unfair is it to 
think each is independent of one another. 


